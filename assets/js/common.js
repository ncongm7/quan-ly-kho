/* ===== JAVASCRIPT CHUNG CHO H·ªÜ TH·ªêNG QU·∫¢N L√ù KHO ===== */

// C·∫•u h√¨nh API - C·∫¨P NH·∫¨T SAU KHI DEPLOY RI√äNG BI·ªÜT
const API_CONFIG = {
    // URL c≈© (t·∫°m th·ªùi gi·ªØ l·∫°i ƒë·ªÉ test)
    IMPORT_URL: "https://script.google.com/macros/s/AKfycbz1_yEY8FcKuNetaZZnWGwIHfIHpmqECYAz98zoPyLvL_86SaHXP_OfjFWGy8Xtqq_yLw/exec",
    SALES_URL: "https://script.google.com/macros/s/AKfycbyTcrjqRmezNn_DRNLUHKtBaFk3_E8Db0iJeB-tlkSgwjeZVV0oP1gkAb0RJ5Il8CjMmQ/exec",
    DASHBOARD_URL: "https://script.google.com/macros/s/AKfycbxZKv7i0rhenJbFZ9qsPJjlOMj5i8zQXHs7aBte_ZXPfMe3A3SoFUtJJ1ycODKSzhWsHQ/exec"


};

// Bi·∫øn global
let products = [];
let currentBarcodes = [];

// ==========================================================
// H√ÄM GIAO TI·∫æP V·ªöI API
// ==========================================================

async function sendToAPI(url, action, data) {
    console.log(`API POST Call: ${action}`, data);
    try {
        const response = await fetch(url, {
            method: "POST",
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ action: action, ...data }),
        });

        if (response.ok) {
            const responseData = await response.json();
            console.log(`API Response for ${action}:`, responseData);
            return responseData;
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error(`L·ªói khi g·ª≠i action '${action}':`, error);
        throw error;
    }
}

async function doGetApi(url, action) {
    try {
        const response = await fetch(`${url}?action=${action}`, {
            method: "GET",
            headers: {
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const data = await response.json();
            return data;
        } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
    } catch (error) {
        console.error(`L·ªói khi g·ªçi GET API '${action}':`, error);
        throw error;
    }
}

// ==========================================================
// H√ÄM LOAD D·ªÆ LI·ªÜU S·∫¢N PH·∫®M
// ==========================================================

async function loadProducts() {
    const productSelect = document.getElementById("productSelect");
    try {
        updateConnectionStatus("ƒêang t·∫£i danh s√°ch s·∫£n ph·∫©m...", false);

        // G·ªçi t·ªõi Google Apps Script
        const response = await doGetApi(API_CONFIG.IMPORT_URL, "getProducts");
        products = response.products || [];

        if (productSelect) {
            populateProductSelect(products);
            productSelect.disabled = false;
        }

        const submitBtn = document.getElementById("submitBtn");
        if (submitBtn) submitBtn.disabled = false;

        updateConnectionStatus("ƒê√£ k·∫øt n·ªëi", true);
    } catch (error) {
        updateConnectionStatus("L·ªói k·∫øt n·ªëi", false);
        if (productSelect) {
            productSelect.innerHTML = '<option value="">-- L·ªói t·∫£i d·ªØ li·ªáu --</option>';
        }
        showError(`Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m: ${error.message}.`);
    }
}

// ==========================================================
// H√ÄM GIAO DI·ªÜN (UI) CHUNG
// ==========================================================

function updateConnectionStatus(message, isConnected) {
    const indicator = document.getElementById("statusIndicator");
    const text = document.getElementById("connectionText");

    if (indicator) {
        indicator.className = `status-indicator ${isConnected ? "status-connected" : "status-disconnected"}`;
    }
    if (text) text.textContent = message;
}

function populateProductSelect(productsData) {
    const select = document.getElementById("productSelect");
    if (!select) return;

    select.innerHTML = '<option value="">-- Ch·ªçn s·∫£n ph·∫©m --</option>';
    productsData.forEach((product) => {
        const option = document.createElement("option");
        option.value = product.maSP;
        option.textContent = `${product.tenSP} (${product.maSP})`;
        select.appendChild(option);
    });
}

function showLoading(show) {
    const loading = document.getElementById("loading");
    const submitBtn = document.getElementById("submitBtn");

    if (loading) loading.style.display = show ? "block" : "none";
    if (submitBtn) submitBtn.disabled = show;
}

function hideAlerts() {
    ["successAlert", "errorAlert", "infoAlert"].forEach((id) => {
        const el = document.getElementById(id);
        if (el) el.style.display = "none";
    });
}

function showAlert(id, message) {
    const el = document.getElementById(id);
    if (el) {
        el.textContent = message;
        el.style.display = "block";
    }
}

function showSuccess(message) {
    showAlert("successAlert", message);
}

function showError(message) {
    showAlert("errorAlert", message);
}

function showInfo(message) {
    showAlert("infoAlert", message);
}

// ==========================================================
// H√ÄM UTILITY
// ==========================================================

function formatCurrency(amount) {
    return new Intl.NumberFormat("vi-VN", {
        style: "currency",
        currency: "VND",
    }).format(amount);
}

function formatDate(date) {
    return new Intl.DateTimeFormat("vi-VN", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
    }).format(new Date(date));
}

function navigateTo(page) {
    window.location.href = page;
}

function setActivePage(pageName) {
    const navItems = document.querySelectorAll(".nav-item");
    navItems.forEach((item) => {
        item.classList.remove("active");
        if (item.getAttribute("data-page") === pageName) {
            item.classList.add("active");
        }
    });
}

async function testConnection() {
    try {
        updateConnectionStatus("ƒêang test k·∫øt n·ªëi...", false);
        showLoading(true);

        console.log("=== TEST K·∫æT N·ªêI ===");

        // Test b·∫±ng c√°ch g·ª≠i m·ªôt request ƒë∆°n gi·∫£n
        const response = await sendToAPI(API_CONFIG.IMPORT_URL, "getProducts", {});

        if (response.products) {
            updateConnectionStatus("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!", true);
            showSuccess("K·∫øt n·ªëi th√†nh c√¥ng! API ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.");
        } else {
            throw new Error("Response kh√¥ng h·ª£p l·ªá");
        }
    } catch (error) {
        console.error("Test connection error:", error);
        updateConnectionStatus("‚ùå L·ªói k·∫øt n·ªëi", false);
        showError(`L·ªói k·∫øt n·ªëi: ${error.message}`);
    } finally {
        showLoading(false);
    }
}

// ==========================================================
// H√ÄM T·∫†O V√Ä IN M√É V·∫†CH
// ==========================================================

function generateAndDownloadBarcodes(maSP, tenSP, soLuong) {
    try {
        // T·∫°o danh s√°ch m√£ v·∫°ch
        const barcodes = [];
        for (let i = 1; i <= soLuong; i++) {
            const barcode = `${maSP}-${String(i).padStart(3, '0')}`;
            barcodes.push(barcode);
        }

        // T·∫°o PDF v·ªõi jsPDF v√† JsBarcode
        printBarcodesPDF(barcodes, tenSP, maSP);

        showSuccess(`‚úÖ ƒê√£ t·∫°o v√† download PDF m√£ v·∫°ch cho ${soLuong} th√πng ${tenSP}!`);

    } catch (error) {
        showError(`L·ªói khi t·∫°o PDF: ${error.message}`);
    }
}

function printBarcodesPDF(barcodes, tenSP, maSP) {
    if (!barcodes || barcodes.length === 0) return;

    try {
        // Ki·ªÉm tra xem c√≥ th∆∞ vi·ªán jsPDF v√† JsBarcode kh√¥ng
        if (typeof window.jspdf === 'undefined' || typeof JsBarcode === 'undefined') {
            showError("Th∆∞ vi·ªán jsPDF ho·∫∑c JsBarcode ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng ki·ªÉm tra l·∫°i.");
            return;
        }

        const { jsPDF } = window.jspdf;
        const doc = new jsPDF({
            orientation: "landscape",
            unit: "mm",
            format: "a4",
        });

        // Th√™m ti√™u ƒë·ªÅ
        doc.setFontSize(16);
        doc.text(`üì¶ M√É V·∫†CH S·∫¢N PH·∫®M - ${tenSP} (${maSP})`, 10, 15);
        doc.setFontSize(10);
        doc.text(`Ng√†y t·∫°o: ${new Date().toLocaleDateString('vi-VN')} | S·ªë l∆∞·ª£ng: ${barcodes.length} th√πng`, 10, 22);

        const BARCODE_WIDTH_MM = 120;
        const BARCODE_HEIGHT_MM = 50;
        const MARGIN = 10;
        let x = MARGIN,
            y = MARGIN + 30; // B·∫Øt ƒë·∫ßu sau ti√™u ƒë·ªÅ

        const canvas = document.createElement("canvas");

        for (const code of barcodes) {
            JsBarcode(canvas, code, {
                format: "CODE128",
                width: 4,
                height: 160,
                displayValue: true,
                fontSize: 36,
                margin: 10,
            });
            const dataUrl = canvas.toDataURL("image/jpeg", 1.0);

            if (y + BARCODE_HEIGHT_MM > doc.internal.pageSize.getHeight() - MARGIN) {
                doc.addPage();
                y = MARGIN;
            }
            doc.addImage(
                dataUrl,
                "JPEG",
                x,
                y,
                BARCODE_WIDTH_MM,
                BARCODE_HEIGHT_MM
            );
            y += BARCODE_HEIGHT_MM + 5; // Kho·∫£ng c√°ch gi·ªØa c√°c m√£
        }

        const filename = `barcodes_${maSP}_${new Date().toISOString().slice(0, 10)}.pdf`;
        doc.save(filename);

    } catch (error) {
        console.error("L·ªói khi t·∫°o PDF:", error);
        showError(`L·ªói khi t·∫°o PDF: ${error.message}`);
    }
}

// ==========================================================
// H√ÄM KH·ªûI T·∫†O CHUNG
// ==========================================================

document.addEventListener("DOMContentLoaded", () => {
    const page = document.body && document.body.dataset ? document.body.dataset.page : null;
    console.log(`Trang ${page} ƒë√£ load`);

    // Set active page
    if (page) {
        setActivePage(page);
    }

    // Kh·ªüi t·∫°o theo t·ª´ng trang
    switch (page) {
        case "nhaphang":
            loadProducts();
            break;
        case "banhang":
            // Kh·ªüi t·∫°o scanner sau khi trang load xong
            setTimeout(() => {
                if (typeof initializeScanner === 'function') {
                    initializeScanner();
                }
            }, 2000);
            break;
        case "dashboard":
            // Kh·ªüi t·∫°o dashboard
            if (typeof initializeDashboard === 'function') {
                initializeDashboard();
            }
            break;
    }

    // Test k·∫øt n·ªëi sau 1 gi√¢y
    setTimeout(() => {
        testConnection();
    }, 1000);
}); 