/* ===== JAVASCRIPT CHO CH·ª®C NƒÇNG NH·∫¨P H√ÄNG ===== */

// Bi·∫øn ƒë·ªÉ tr√°nh h·ªèi download nhi·ªÅu l·∫ßn
let isDownloadPrompted = false;
// Bi·∫øn ƒë·ªÉ tr√°nh g·ªçi importAndCreate nhi·ªÅu l·∫ßn c√πng l√∫c
let isImporting = false;

// ==========================================================
// H√ÄM NH·∫¨P H√ÄNG CH√çNH
// ==========================================================

async function importAndCreate(maSP, tenSP, soLuong) {
    // Ki·ªÉm tra n·∫øu ƒëang nh·∫≠p h√†ng th√¨ b·ªè qua
    if (isImporting) {
        console.log("ƒêang nh·∫≠p h√†ng, b·ªè qua request n√†y...");
        return;
    }

    console.log("=== B·∫ÆT ƒê·∫¶U NH·∫¨P H√ÄNG ===");
    console.log("M√£ SP:", maSP, "T√™n SP:", tenSP, "S·ªë l∆∞·ª£ng:", soLuong);

    isImporting = true;
    showLoading(true);
    hideAlerts();

    // Reset flag
    isDownloadPrompted = false;

    try {
        // G·ª≠i d·ªØ li·ªáu nh·∫≠p h√†ng ƒë·∫øn API
        console.log("G·ª≠i d·ªØ li·ªáu ƒë·∫øn backend...");
        const response = await sendToAPI(API_CONFIG.IMPORT_URL, "importProducts", {
            maSP: maSP,
            tenSP: tenSP,
            soLuong: soLuong,
        });

        if (response.status === 'success') {
            console.log("‚úÖ Nh·∫≠p h√†ng th√†nh c√¥ng!");
            showSuccess(response.message || `‚úÖ ƒê√£ nh·∫≠p th√†nh c√¥ng ${soLuong} th√πng ${tenSP} v√†o h·ªá th·ªëng!`);

            // Hi·ªÉn th·ªã danh s√°ch m√£ v·∫°ch ƒë√£ t·∫°o
            if (response.newBarcodes && response.newBarcodes.length > 0) {
                displayBarcodeList(response.newBarcodes, tenSP, maSP);
            }
        } else {
            throw new Error(response.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
        }

        // H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën download PDF kh√¥ng (ch·ªâ 1 l·∫ßn)
        console.log("Chu·∫©n b·ªã h·ªèi download PDF...");
        setTimeout(() => {
            if (!isDownloadPrompted) {
                console.log("Hi·ªÉn th·ªã dialog h·ªèi download...");
                isDownloadPrompted = true;
                if (confirm(`B·∫°n c√≥ mu·ªën download PDF m√£ v·∫°ch cho ${soLuong} th√πng ${tenSP} kh√¥ng?`)) {
                    console.log("Ng∆∞·ªùi d√πng ch·ªçn download PDF");
                    generateAndDownloadBarcodes(maSP, tenSP, soLuong);
                } else {
                    console.log("Ng∆∞·ªùi d√πng t·ª´ ch·ªëi download PDF");
                }
            } else {
                console.log("ƒê√£ h·ªèi download r·ªìi, b·ªè qua...");
            }
        }, 1000);

    } catch (error) {
        console.error("L·ªói nh·∫≠p h√†ng:", error);
        showError(`L·ªói khi g·ª≠i y√™u c·∫ßu nh·∫≠p h√†ng: ${error.message}`);
    } finally {
        showLoading(false);
        isImporting = false; // Reset flag
        console.log("=== K·∫æT TH√öC NH·∫¨P H√ÄNG ===");
    }
}

// ==========================================================
// H√ÄM HI·ªÇN TH·ªä DANH S√ÅCH M√É V·∫†CH
// ==========================================================

function displayBarcodeList(barcodes, tenSP, maSP) {
    const barcodeList = document.getElementById('barcodeList');
    const barcodeGrid = document.getElementById('barcodeGrid');

    if (!barcodeList || !barcodeGrid) return;

    // Hi·ªÉn th·ªã container
    barcodeList.style.display = 'block';

    // T·∫°o HTML cho danh s√°ch m√£ v·∫°ch
    barcodeGrid.innerHTML = '';
    barcodes.forEach(barcode => {
        const barcodeItem = document.createElement('div');
        barcodeItem.className = 'barcode-item';
        barcodeItem.textContent = barcode;
        barcodeGrid.appendChild(barcodeItem);
    });

    // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ
    const title = barcodeList.querySelector('h3');
    if (title) {
        title.textContent = `üìã Danh S√°ch M√£ V·∫°ch ƒê√£ T·∫°o - ${tenSP} (${maSP})`;
    }
}

// ==========================================================
// H√ÄM IN M√É V·∫†CH
// ==========================================================

function printBarcodes() {
    const barcodeGrid = document.getElementById('barcodeGrid');
    if (!barcodeGrid) return;

    const barcodeItems = barcodeGrid.querySelectorAll('.barcode-item');
    if (barcodeItems.length === 0) {
        showError('Kh√¥ng c√≥ m√£ v·∫°ch n√†o ƒë·ªÉ in');
        return;
    }

    // T·∫°o c·ª≠a s·ªï in m·ªõi
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
            <title>In M√£ V·∫°ch</title>
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    margin: 20px;
                    font-size: 12px;
                }
                .barcode-container {
                    display: grid;
                    grid-template-columns: repeat(3, 1fr);
                    gap: 10px;
                    margin-bottom: 20px;
                }
                .barcode-item {
                    border: 1px solid #ccc;
                    padding: 10px;
                    text-align: center;
                    font-family: monospace;
                    font-size: 14px;
                    background: #f9f9f9;
                }
                @media print {
                    .barcode-container {
                        grid-template-columns: repeat(3, 1fr);
                    }
                }
            </style>
        </head>
        <body>
            <h2>üì¶ Danh S√°ch M√£ V·∫°ch</h2>
            <div class="barcode-container">
    `);

    barcodeItems.forEach(item => {
        printWindow.document.write(`
            <div class="barcode-item">${item.textContent}</div>
        `);
    });

    printWindow.document.write(`
            </div>
        </body>
        </html>
    `);

    printWindow.document.close();
    printWindow.print();
}

function printBarcodesPDF() {
    const barcodeGrid = document.getElementById('barcodeGrid');
    if (!barcodeGrid) return;

    const barcodeItems = barcodeGrid.querySelectorAll('.barcode-item');
    if (barcodeItems.length === 0) {
        showError('Kh√¥ng c√≥ m√£ v·∫°ch n√†o ƒë·ªÉ in');
        return;
    }

    // L·∫•y danh s√°ch m√£ v·∫°ch
    const barcodes = Array.from(barcodeItems).map(item => item.textContent);

    // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ ti√™u ƒë·ªÅ
    const title = document.querySelector('#barcodeList h3');
    let tenSP = 'S·∫£n ph·∫©m';
    let maSP = 'SP';

    if (title) {
        const titleText = title.textContent;
        const match = titleText.match(/\((.*?)\)/);
        if (match) {
            maSP = match[1];
        }
        const nameMatch = titleText.match(/-(.*?)\s*\(/);
        if (nameMatch) {
            tenSP = nameMatch[1].trim();
        }
    }

    // G·ªçi h√†m t·∫°o PDF
    printBarcodesPDF(barcodes, tenSP, maSP);
}

// ==========================================================
// H√ÄM X·ª¨ L√ù FORM
// ==========================================================

function initializeImportForm() {
    const form = document.getElementById('importForm');
    if (!form) return;

    // X√≥a event listener c≈© n·∫øu c√≥
    form.removeEventListener('submit', handleImportFormSubmit);

    // Th√™m event listener m·ªõi
    form.addEventListener('submit', handleImportFormSubmit);
}

function handleImportFormSubmit(e) {
    e.preventDefault();
    console.log("Form submitted - x·ª≠ l√Ω nh·∫≠p h√†ng...");

    const maSP = document.getElementById("productSelect").value;
    const soLuong = document.getElementById("quantityInput").value;
    const product = products.find((p) => p.maSP === maSP);

    if (product && soLuong > 0) {
        importAndCreate(maSP, product.tenSP, soLuong);
    } else {
        showError("Vui l√≤ng ch·ªçn s·∫£n ph·∫©m v√† nh·∫≠p s·ªë l∆∞·ª£ng h·ª£p l·ªá.");
    }
}

// ==========================================================
// H√ÄM KH·ªûI T·∫†O TRANG NH·∫¨P H√ÄNG
// ==========================================================

function initializeImportPage() {
    console.log("Kh·ªüi t·∫°o trang nh·∫≠p h√†ng...");

    // Kh·ªüi t·∫°o form
    initializeImportForm();

    // Load danh s√°ch s·∫£n ph·∫©m
    loadProducts();
}

// Kh·ªüi t·∫°o khi trang load
if (document.body.dataset.page === 'nhaphang') {
    document.addEventListener('DOMContentLoaded', initializeImportPage);
} 